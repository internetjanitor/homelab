---
- name: Set timezone
  ansible.builtin.timezone:
    name: America/New_York

- name: Install server kernel
  community.general.pacman:
    name:
      - linux-cachyos-server
      - linux-cachyos-server-headers
      - linux-cachyos-server-zfs
      - linux-cachyos-server-nvidia
      - ast-firmware
      - apparmor
      - apparmor.d-git
    state: "{{ package_state }}"
  register: kernel_install

- name: Configure AppArmor parser
  ansible.builtin.blockinfile:
    path: /etc/apparmor/parser.conf
    block: |
      write-cache
      Optimize=compress-fast
    create: yes
    owner: root
    group: root
    mode: '0644'

- name: Enable apparmor in kernel
  ansible.builtin.copy: 
    src: limine-apparmor.conf
    dest: /etc/limine-entry-tool.d/apparmor.conf
    owner: root
    group: root
    mode: '0644'
  register: apparmor_install

- name: Apply apparmor kernel config
  ansible.builtin.command: limine-mkinitcpio
  when: apparmor_install.changed

- name: Configure secondary GPU for libvirt passthrough
  ansible.builtin.copy:
    src: modprobe-vfio.conf
    dest: /etc/modprobe.d/vfio.conf
    owner: root
    group: root
    mode: '0644'

- name: Check if reboot is required after kernel update
  ansible.builtin.pause:
    prompt: "Kernel was updated. Do you want to reboot now? (yes/no)"
  register: reboot_prompt
  when: kernel_install.changed or apparmor_install.changed

- name: Reboot the server
  ansible.builtin.reboot:
    msg: "Rebooting after kernel update"
    reboot_timeout: 300
  when: 
    - kernel_install.changed
    - reboot_prompt.user_input | default('no') | lower == 'yes'

- name: Ensure system is up to date
  community.general.pacman:
    update_cache: yes
    upgrade: yes
  when: update | default(false) | bool

- name: Install base packages
  community.general.pacman:
    name:
      - bash-completion
      - bridge-utils
      - chrony
      - cifs-utils
      - devtools
      - dmidecode
      - duperemove
      - freeipmi
      - iotop
      - ipmitool
      - meson
      - ncdu
      - ollama-cuda
      - openbsd-netcat
      - openipmi
      - prometheus-ipmi-exporter
      - python-docutils
      - python-lxml
      - samba
      - tmux
      - ufw
      - wgcf
      - wireguard-tools
      - xorg-xauth
    state: "{{ package_state }}"

- name: Create the `aur_builder` user
  become: yes
  ansible.builtin.user:
    name: aur_builder
    create_home: yes
    group: wheel

- name: Allow the `aur_builder` user to run `sudo pacman` without a password
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/11-install-aur_builder
    line: 'aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman'
    create: yes
    mode: 0644
    validate: 'visudo -cf %s'

- name: Install essential packages from AUR
  kewlfft.aur.aur:
    name:
      - cockpit-file-sharing
      - cockpit-navigator
      - cockpit-sensors
      - cockpit-zfs-manager
      - lsof
      - rasdaemon
      - sscg
      - stacer-bin
      - stressapptest
      - tcpdump
      - wsdd
    use: paru
    state: "{{ package_state }}"
  become: yes
  become_user: aur_builder
  when: install_aur_packages | default(false)

# chown ollama:ollama /var/lib/ollama
# ras-mc-ctl --error-count

- name: Allow App profiles through UFW
  community.general.ufw:
    rule: allow
    name: "{{ item }}"
  loop:
    - SSH
    - Samba

- name: Allow WSDD through UFW
  community.general.ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    comment: "{{ item.comment }}"
  loop:
    - { port: '3702', proto: 'udp', comment: 'WSDD multicast discovery' }
    - { port: '3702', proto: 'tcp', comment: 'WSDD Unicast SOAP HTTP WS-Discovery responses' }
    - { port: '5355', proto: 'udp', comment: 'WSDD Link-Local Multicast Name Resolution responses' }
    - { port: '5355', proto: 'tcp', comment: 'WSDD Link-Local Multicast Name Resolution responses' }
    - { port: '5357', proto: 'tcp', comment: 'WSDD Web Services for Devices HTTP responses' }
    - { port: '5358', proto: 'tcp', comment: 'WSDD Web Services for Devices HTTPS responses' }

- name: Deny rules for UFW
  community.general.ufw:
    rule: deny
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    comment: "{{ item.comment }}"
  loop:
    - { port: '1900', proto: 'udp', comment: 'Simple Service Discovery Protocol' }

- name: Allow Ollama through UFW
  community.general.ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    comment: "{{ item.comment }}"
  loop:
    - { port: '11434', proto: 'tcp', comment: 'Ollama' }

- name: Set UFW logging
  community.general.ufw:
    logging: 'low'

- name: Enable UFW
  community.general.ufw:
    state: enabled

- name: Create ollama systemd override directory
  ansible.builtin.file:
    path: /etc/systemd/system/ollama.service.d
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create ollama systemd override config
  ansible.builtin.copy:
    src: ollama.service.d-override.conf
    dest: /etc/systemd/system/ollama.service.d/override.conf
    owner: root
    group: root
    mode: '0644'

- name: Enable and start services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - apparmor
    - chronyd
    - ollama
    - rasdaemon
    - ufw
    - wsdd

- name: Configure SSH known host for Arch Gitlab
  ansible.builtin.lineinfile:
    path: /root/.ssh/known_hosts
    line: 'gitlab.archlinux.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICjT2SuA0k/xc5Cbyp+eBY5uN3bRL2K7GdpNtltOK6vy'

# - name: Configure sysctl for performance
#   sysctl:
#     name: "{{ item.name }}"
#     value: "{{ item.value }}"
#     state: present
#     sysctl_file: /etc/sysctl.d/99-performance.conf
#   loop:
#     - { name: 'vm.swappiness', value: '10' }
#     - { name: 'vm.vfs_cache_pressure', value: '50' }
