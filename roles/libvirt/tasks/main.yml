---
- name: Install libvirt and KVM packages
  community.general.pacman:
    name:
      # - libvirt
      - qemu-full
      - virt-install
      - virt-manager
      - virt-viewer
      - dnsmasq
      - ebtables
      - bridge-utils
    state: "{{ package_state }}"

- name: Enable apparmor in libvirt qemu.conf
  ansible.builtin.lineinfile:
    path: /etc/libvirt/qemu.conf
    insertafter: '#security_driver ='
    line: 'security_driver = "apparmor"'
    state: present

- name: Create directory for libvirt apparmor settings
  ansible.builtin.file:
    path: /etc/apparmor.d/abstractions/libvirt-qemu.d
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create apparmor abstraction for virt-isos pool access
  ansible.builtin.copy:
    src: virt-isos.apparmor.conf
    dest: /etc/apparmor.d/abstractions/libvirt-qemu.d/virt-isos.conf
    owner: root
    group: root
    mode: '0644'

- name: Add users to libvirt group
  user:
    name: "{{ item }}"
    groups: libvirt
    append: yes
  loop: "{{ virt_users }}"

- name: Enable and start libvirtd service
  systemd:
    name: libvirtd
    state: started
    enabled: yes

- name: Get default storage pool settings
  community.libvirt.virt_pool:
    name: default
    command: get_xml
  register: default_pool
  
- name: Disable default storage pool
  community.libvirt.virt_pool:
    name: default
    state: absent
  when: "'/var/lib/libvirt/images' in default_pool.get_xml"

- name: Ensure VM storage directory exists
  file:
    path: /pool0/virt-images
    state: directory
    mode: '0755'

- name: Configure virt-images as default storage pool for VMs
  community.libvirt.virt_pool:
    command: define
    name: default
    xml: '{{ lookup("file", "virt-images.xml") }}'

- name: Ensure virt-images storage pool is active
  community.libvirt.virt_pool:
    name: default
    state: active

- name: Ensure virt-images storage pool is autostarted at boot
  community.libvirt.virt_pool:
    name: default
    autostart: true

- name: Ensure VM ISOs directory exists
  file:
    path: /pool0/virt-isos
    state: directory
    mode: '0755'

- name: Configure virt-isos storage pool
  community.libvirt.virt_pool:
    command: define
    name: virt-isos
    xml: '{{ lookup("file", "virt-isos.xml") }}'

- name: Enable libvirt default network autostart
  community.libvirt.virt_net:
    name: default
    autostart: true

- name: Start libvirt default network
  community.libvirt.virt_net:
    name: default
    state: active

- name: Configure wireguard0 network
  community.libvirt.virt_net:
    command: define
    name: wireguard1
    xml: '{{ lookup("file", "virt-wireguard1.xml") }}'

- name: Enable wireguard1 network autostart
  community.libvirt.virt_net:
    name: wireguard1
    autostart: true

- name: Start wireguard1 network
  community.libvirt.virt_net:
    name: wireguard1
    state: active

- name: Allow Guest DHCP through UFW
  community.general.ufw:
    rule: allow
    direction: in
    interface: "{{ item.interface }}"
    proto: "{{ item.proto }}"
    to: any
    port: "{{ item.port }}"
    comment: "{{ item.comment }}"
  loop:
    - { interface: 'virbr0', port: '53,67', proto: 'udp', comment: 'Guest DHCP to Host' }
    - { interface: 'virbr1', port: '53,67', proto: 'udp', comment: 'Guest DHCP to Host' }

- name: Allow Guest Forwarding through UFW
  community.general.ufw:
    rule: allow
    interface_in: "{{ item.interface_in }}"
    interface_out: "{{ item.interface_out }}"
    from: "{{ item.from }}"
    to: any
    route: true
    comment: "{{ item.comment }}"
  loop:
    - { interface_in: 'virbr0', interface_out: 'eno1np0', from: '192.168.122.0/24', comment: 'Guest Forwarding' }
    - { interface_in: 'virbr1', interface_out: 'wg1', from: '192.168.100.0/24', comment: 'Guest Forwarding' }
